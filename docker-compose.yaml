services:     
  ########################################
  ########### REVERSE-PROXY ##############
  ########################################
  traefik:
    image: ${TRAEFIK}
    command: --api.insecure=true --providers.docker=true #Enables the web UI and tells TrÃ¦fik to listen to docker
    ports:
      - "80:80" #The HTTP port
      - "8082:8080" #The Web UI (enabled by --api)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock #so Traefik can listen to the Docker events
      - ./init-data/traefik/traefik-conf.yml:/etc/traefik/traefik.yml
      - ./init-data/traefik/traefik-services.yml:/etc/traefik/services.yml
        #labels:
        #- "traefik.http.routers.local_mfe.entrypoints=web"
        #- "traefik.http.routers.local_mfe.rule=Host(`local-proxy`)&&PathPrefix(`/mfe/onecx-theme-ui`)"
        #- "traefik.http.routers.local_mfe.service=local_mfe@file"
        ## Localy running BFF has to be started with port 8585
        #- "traefik.http.routers.local_bff.entrypoints=web"
        #- "traefik.http.routers.local_bff.rule=Host(`onecx-theme-bff`)"
        #- "traefik.http.routers.local_bff.service=local_bff@file"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - example

  ########################################
  ############### DATABASE ###############
  ########################################
  postgresdb:
    image: ${POSTGRES}
    container_name: postgresdb
    command: [-cmax_prepared_transactions=100]
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: admin
      # POSTGRES_DB: postgres
      # POSTGRES_USER: postgres
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./init-data/db:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      traefik:
        condition: service_started
    labels:
      - "traefik.http.services.postgresdb.loadbalancer.server.port=5432"
      - "traefik.http.routers.postgresdb.rule=Host(`postgresdb`)"
    networks:
      - example

  pgadmin:
    image: ${PGADMIN}
    environment:
      PGADMIN_DEFAULT_EMAIL: user@example.com
      PGADMIN_DEFAULT_PASSWORD: mysecretpassword
    volumes:
      - ./init-data/pgadmin/servers.json:/pgadmin4/servers.json
    depends_on:
      postgresdb:
        condition: service_healthy
    labels:
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin`)"
    networks:
      - example
    profiles:
      - all

  #############################################
  ################ Security ###################
  #############################################
  keycloak-app:
    image: ${KEYCLOAK}
    command: "start-dev --import-realm"
    container_name: keycloak-app
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_POOL_INITIAL_SIZE : 1
      KC_DB_POOL_MAX_SIZE : 5
      KC_DB_POOL_MIN_SIZE : 2
      KC_DB_URL_DATABASE: keycloak
      KC_DB_URL_HOST: postgresdb
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_HOSTNAME: keycloak-app
      KC_HOSTNAME_STRICT: false
      KC_HTTP_ENABLED: true
      KC_HTTP_PORT: 8080
      KC_HEALTH_ENABLED: true
    volumes:
      - ./init-data/keycloak/imports:/opt/keycloak/data/import
    healthcheck:
      test: "{ printf >&3 'GET /realms/onecx/.well-known/openid-configuration HTTP/1.0\r\nHost: localhost\r\n\r\n'; cat <&3; } 3<>/dev/tcp/localhost/8080 | head -1 | grep 200"
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      postgresdb:
        condition: service_healthy
    labels:
      - "traefik.http.services.keycloak-intranet.loadbalancer.server.port=8080"
      - "traefik.http.routers.keycloak-intranet.rule=Host(`keycloak-app`)"
    networks:
      - example

  ##############################################################
  ######### Products #######################################
  ##############################################################

  # ######### EVENT_MANAGEMENT_CLIENT_PWA

  # event-management-client-pwa-ui:
  #   image: ${EVENT_MANAGEMENT_CLIENT_PWA_UI}
  #   container_name: event-management-client-pwa-ui
  #   environment:
  #     ONECX_PERMISSIONS_ENABLED: true
  #     ONECX_PERMISSIONS_CACHE_ENABLED: false
  #     ONECX_PERMISSIONS_PRODUCT_NAME: "event-management-client-pwa"
  #     APP_BASE_HREF: "/event-management-client-pwa/"
  #     KEYCLOAK_URL: http://keycloak-app
  #     ONECX_VAR_REMAP: "KEYCLOAK_REALM=KC_REALM;KEYCLOAK_CLIENT_ID=CLIENT_USER_ID"
  #     CLIENT_USER_ID: "event-management-client-pwa-ui-client"
  #   depends_on:
  #     keycloak-app:
  #       condition: service_healthy
  #     event-participant-bff:
  #       condition: service_healthy
  #   labels:
  #     - "traefik.http.services.event-management-client-pwa-ui.loadbalancer.server.port=8080"
  #     - "traefik.http.routers.event-management-client-pwa-ui.rule=Host(`local-proxy`)&&PathPrefix(`/event-management-client-pwa/`)"
  #   env_file:
  #     - common.env
  #   networks:
  #     - example

  ########## EVENT_MGMT
  
  event-management-svc:
    image: ${EVENT_MANAGEMENT_SVC}
    environment:
      QUARKUS_DATASOURCE_USERNAME: event_management
      QUARKUS_DATASOURCE_PASSWORD: event_management
      QUARKUS_DATASOURCE_JDBC_URL: "jdbc:postgresql://postgresdb:5432/event_management?sslmode=disable"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      postgresdb:
        condition: service_healthy
      keycloak-app:
        condition: service_healthy
    labels:
      - "traefik.http.services.event-management-svc.loadbalancer.server.port=8080"
      - "traefik.http.routers.event-management-svc.rule=Host(`event-management-svc`)"
    env_file:
      - common.env
      - svc.env
    networks:
      - example

  event-management-bff:
    image: ${EVENT_MANAGEMENT_BFF}
    container_name: event-management-bff
    environment:
      ONECX_PERMISSIONS_PRODUCT_NAME: "event-management"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      keycloak-app:
        condition: service_healthy
      onecx-theme-svc:
        condition: service_started
      onecx-permission-svc:
        condition: service_started
      onecx-product-store-svc:
        condition: service_started
      onecx-user-profile-svc:
        condition: service_started
      onecx-tenant-svc:
        condition: service_started
      onecx-workspace-svc:
        condition: service_started
      event-management-svc:
        condition: service_started
    labels:
      - "traefik.http.services.event-management-bff.loadbalancer.server.port=8080"
      - "traefik.http.routers.event-management-bff.rule=Host(`event-management-bff`)"
    env_file:
      - common.env
      - bff.env
    networks:
      - example

  event-management-ui:
    image: ${EVENT_MANAGEMENT_UI}
    environment:
      APP_BASE_HREF: "/mfe/event-management/"
      APP_ID: "event-management-ui"
      PRODUCT_NAME: "event-management"
    depends_on:
      event-management-bff:
        condition: service_healthy
    labels:
      - "traefik.http.services.event-management-ui.loadbalancer.server.port=8080"
      - "traefik.http.routers.event-management-ui.rule=Host(`local-proxy`)&&PathPrefix(`/mfe/event-management/`)"
    networks:
      - example

  ########## EVENT_PARTICIPANT
  
  event-participant-bff:
    image: ${EVENT_PARTICIPANT_BFF}
    container_name: event-participant-bff
    environment:
      ONECX_PERMISSIONS_PRODUCT_NAME: "event-participant"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      keycloak-app:
        condition: service_healthy
      onecx-theme-svc:
        condition: service_started
      onecx-permission-svc:
        condition: service_started
      onecx-product-store-svc:
        condition: service_started
      onecx-user-profile-svc:
        condition: service_started
      onecx-tenant-svc:
        condition: service_started
      onecx-workspace-svc:
        condition: service_started
    labels:
      - "traefik.http.services.event-participant-bff.loadbalancer.server.port=8080"
      - "traefik.http.routers.event-participant-bff.rule=Host(`event-participant-bff`)"
    env_file:
      - common.env
      - bff.env
    networks:
      - example

  ########## EVENT_TOUCHPOINT_MGMT
  
  onecx-touchpoint-management-svc:
    image: ${ONECX_TOUCHPOINT_MANAGEMENT_SVC}
    environment:
      QUARKUS_DATASOURCE_USERNAME: onecx_touchpoint_management
      QUARKUS_DATASOURCE_PASSWORD: onecx_touchpoint_management
      QUARKUS_DATASOURCE_JDBC_URL: "jdbc:postgresql://postgresdb:5432/onecx_touchpoint_management?sslmode=disable"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      postgresdb:
        condition: service_healthy
      keycloak-app:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-touchpoint-management-svc.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-touchpoint-management-svc.rule=Host(`onecx-touchpoint-management-svc`)"
    env_file:
      - common.env
      - svc.env
    networks:
      - example

  onecx-touchpoint-management-bff:
    image: ${ONECX_TOUCHPOINT_MANAGEMENT_BFF}
    container_name: onecx-touchpoint-management-bff
    environment:
      ONECX_PERMISSIONS_PRODUCT_NAME: "onecx-touchpoint-management"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      keycloak-app:
        condition: service_healthy
      onecx-theme-svc:
        condition: service_started
      onecx-permission-svc:
        condition: service_started
      onecx-product-store-svc:
        condition: service_started
      onecx-user-profile-svc:
        condition: service_started
      onecx-tenant-svc:
        condition: service_started
      onecx-workspace-svc:
        condition: service_started
      onecx-touchpoint-management-svc:
        condition: service_started
    labels:
      - "traefik.http.services.onecx-touchpoint-management-bff.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-touchpoint-management-bff.rule=Host(`onecx-touchpoint-management-bff`)"
    env_file:
      - common.env
      - bff.env
    networks:
      - example

  # There is not image of it yet - 03.03.2025
  onecx-touchpoint-management-ui:
    image: ${ONECX_TOUCHPOINT_MANAGEMENT_UI}
    environment:
      APP_BASE_HREF: "/mfe/onecx-touchpoint-management/"
      APP_ID: "onecx-touchpoint-management-ui"
      PRODUCT_NAME: "onecx-touchpoint-management"
    depends_on:
      onecx-touchpoint-management-bff:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-touchpoint-management-ui.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-touchpoint-management-ui.rule=Host(`local-proxy`)&&PathPrefix(`/mfe/onecx-touchpoint-management/`)"
    networks:
      - example

  ########## EVENT_TOUCHPOINT
  
  # There is not image of it yet - 03.03.2025
  # event-touchpoint-bff:
  #   image: ${EVENT_TOUCHPOINT_BFF}
  #   container_name: event-touchpoint-bff
  #   environment:
  #     ONECX_PERMISSIONS_PRODUCT_NAME: "event-touchpoint"
  #   healthcheck:
  #     test: curl --head -fsS http://localhost:8080/q/health
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 10s
  #   depends_on:
  #     keycloak-app:
  #       condition: service_healthy
  #     onecx-theme-svc:
  #       condition: service_started
  #     onecx-permission-svc:
  #       condition: service_started
  #     onecx-product-store-svc:
  #       condition: service_started
  #     onecx-user-profile-svc:
  #       condition: service_started
  #     onecx-tenant-svc:
  #       condition: service_started
  #     onecx-workspace-svc:
  #       condition: service_started
  #     event-management-svc:
  #       condition: service_started
  #   labels:
  #     - "traefik.http.services.event-touchpoint-bff.loadbalancer.server.port=8080"
  #     - "traefik.http.routers.event-touchpoint-bff.rule=Host(`event-touchpoint-bff`)"
  #   env_file:
  #     - common.env
  #     - bff.env
  #   networks:
  #     - example

  event-touchpoint-ui:
    image: ${EVENT_TOUCHPOINT_UI}
    container_name: event-touchpoint-ui
    environment:
      ONECX_PERMISSIONS_ENABLED: true
      ONECX_PERMISSIONS_CACHE_ENABLED: false
      ONECX_PERMISSIONS_PRODUCT_NAME: "event-touchpoint"
      APP_BASE_HREF: "/event-touchpoint/"
      KEYCLOAK_URL: http://keycloak-app
      ONECX_VAR_REMAP: "KEYCLOAK_REALM=KC_REALM;KEYCLOAK_CLIENT_ID=CLIENT_USER_ID"
      CLIENT_USER_ID: "event-touchpoint-ui-client"
    depends_on:
      keycloak-app:
        condition: service_healthy
      # event-touchpoint-bff:
      #   condition: service_healthy
    labels:
      - "traefik.http.services.event-touchpoint-ui.loadbalancer.server.port=8080"
      - "traefik.http.routers.event-touchpoint-ui.rule=Host(`local-proxy`)&&PathPrefix(`/event-touchpoint/`)"
    env_file:
      - common.env
    networks:
      - example

  ######### LOCATION_MGMT
  
  location-mgmt-svc:
    image: ${LOCATION_MGMT_SVC}
    environment:
      QUARKUS_DATASOURCE_USERNAME: location_mgmt
      QUARKUS_DATASOURCE_PASSWORD: location_mgmt
      QUARKUS_DATASOURCE_JDBC_URL: "jdbc:postgresql://postgresdb:5432/location_mgmt?sslmode=disable"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      postgresdb:
        condition: service_healthy
      keycloak-app:
        condition: service_healthy
    labels:
      - "traefik.http.services.location-mgmt-svc.loadbalancer.server.port=8080"
      - "traefik.http.routers.location-mgmt-svc.rule=Host(`location-mgmt-svc`)"
    env_file:
      - common.env
      - svc.env
    networks:
        - example
  
  location-mgmt-bff:
    image: ${LOCATION_MGMT_BFF}
    container_name: location-mgmt-bff
    environment:
      ONECX_PERMISSIONS_PRODUCT_NAME: "location-mgmt"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      keycloak-app:
        condition: service_healthy
      onecx-theme-svc:
        condition: service_started
      onecx-permission-svc:
        condition: service_started
      onecx-product-store-svc:
        condition: service_started
      onecx-user-profile-svc:
        condition: service_started
      onecx-tenant-svc:
        condition: service_started
      onecx-workspace-svc:
        condition: service_started
      location-mgmt-svc:
        condition: service_started
    labels:
      - "traefik.http.services.location-mgmt-bff.loadbalancer.server.port=8080"
      - "traefik.http.routers.location-mgmt-bff.rule=Host(`location-mgmt-bff`)"
    env_file:
      - common.env
      - bff.env
    networks:
      - example

  location-mgmt-ui:
    image: ${LOCATION_MGMT_UI}
    environment:
      APP_BASE_HREF: "/mfe/location-mgmt/"
      APP_ID: "location-mgmt-ui"
      PRODUCT_NAME: "location-mgmt"
    depends_on:
      location-mgmt-bff:
        condition: service_healthy
    labels:
      - "traefik.http.services.location-mgmt-ui.loadbalancer.server.port=8080"
      - "traefik.http.routers.location-mgmt-ui.rule=Host(`local-proxy`)&&PathPrefix(`/mfe/location-mgmt/`)"
    networks:
      - example

  ########## TOKEN_SERVICE

  token-service-svc:
    image: ${TOKEN_SERVICE_SVC}
    environment:
      QUARKUS_DATASOURCE_USERNAME: token_service
      QUARKUS_DATASOURCE_PASSWORD: token_service
      QUARKUS_DATASOURCE_JDBC_URL: "jdbc:postgresql://postgresdb:5432/token_service?sslmode=disable"
      TKIT_RS_CONTEXT_TENANT_ID_MOCK_ENABLED: "true"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      postgresdb:
        condition: service_healthy
      keycloak-app:
        condition: service_healthy
    labels:
      - "traefik.http.services.token-service-svc.loadbalancer.server.port=8080"
      - "traefik.http.routers.token-service-svc.rule=Host(`token-service-svc`)"
    env_file:
      - common.env
      - svc.env
    networks:
      - example

  token-service-bff:
    image: ${TOKEN_SERVICE_BFF}
    container_name: token-service-bff
    environment:
      ONECX_PERMISSIONS_PRODUCT_NAME: "token-service"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      keycloak-app:
        condition: service_healthy
      onecx-theme-svc:
        condition: service_started
      onecx-permission-svc:
        condition: service_started
      onecx-product-store-svc:
        condition: service_started
      onecx-user-profile-svc:
        condition: service_started
      onecx-tenant-svc:
        condition: service_started
      onecx-workspace-svc:
        condition: service_started
      token-service-svc:
        condition: service_started
    labels:
      - "traefik.http.services.token-service-bff.loadbalancer.server.port=8080"
      - "traefik.http.routers.token-service-bff.rule=Host(`token-service-bff`)"
    env_file:
      - common.env
      - bff.env
    networks:
      - example

  token-service-ui:
    image: ${TOKEN_SERVICE_UI}
    environment:
      APP_BASE_HREF: "/mfe/token-service/"
      APP_ID: "token-service-ui"
      PRODUCT_NAME: "token-service"
    depends_on:
      token-service-bff:
        condition: service_healthy
    labels:
      - "traefik.http.services.token-service-ui.loadbalancer.server.port=8080"
      - "traefik.http.routers.token-service-ui.rule=Host(`local-proxy`)&&PathPrefix(`/mfe/token-service/`)"
    networks:
      - example

  ########## MAILING_SERVICE

  mailing-service-svc:
    image: ${MAILING_SERVICE_SVC}
    environment:
      QUARKUS_DATASOURCE_USERNAME: mailing_service
      QUARKUS_DATASOURCE_PASSWORD: mailing_service
      QUARKUS_DATASOURCE_JDBC_URL: "jdbc:postgresql://postgresdb:5432/mailing_service?sslmode=disable"
      TKIT_RS_CONTEXT_TENANT_ID_MOCK_ENABLED: "true"
    depends_on:
      postgresdb:
        condition: service_healthy
    labels:
      - "traefik.http.services.mailing-service-svc.loadbalancer.server.port=8080"
      - "traefik.http.routers.mailing-service-svc.rule=Host(`mailing-service-svc`)"
    env_file:
      - common.env
      - svc.env
    networks:
      - example

  mailing-service-bff:
    image: ${MAILING_SERVICE_BFF}
    container_name: mailing-service-bff
    environment:
      ONECX_PERMISSIONS_PRODUCT_NAME: "mailing-service"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      keycloak-app:
        condition: service_healthy
      onecx-theme-svc:
        condition: service_started
      onecx-permission-svc:
        condition: service_started
      onecx-product-store-svc:
        condition: service_started
      onecx-user-profile-svc:
        condition: service_started
      onecx-tenant-svc:
        condition: service_started
      onecx-workspace-svc:
        condition: service_started
      mailing-service-svc:
        condition: service_started
    labels:
      - "traefik.http.services.mailing-service-bff.loadbalancer.server.port=8080"
      - "traefik.http.routers.mailing-service-bff.rule=Host(`mailing-service-bff`)"
    env_file:
      - common.env
      - bff.env
    networks:
      - example

  mailing-service-ui:
    image: ${MAILING_SERVICE_UI}
    environment:
      APP_BASE_HREF: "/mfe/mailing-service/"
      APP_ID: "mailing-service-ui"
      PRODUCT_NAME: "mailing-service"
    depends_on:
      mailing-service-bff:
        condition: service_healthy
    labels:
      - "traefik.http.services.mailing-service-ui.loadbalancer.server.port=8080"
      - "traefik.http.routers.mailing-service-ui.rule=Host(`local-proxy`)&&PathPrefix(`/mfe/mailing-service/`)"
    networks:
      - example

  ########## CAMUNDA
  camunda-zeebe:
    image: camunda/zeebe:8.5.0
    container_name: zeebe
    environment:
      - ZEEBE_BROKER_GATEWAY_ENABLE=true
      - ZEEBE_BROKER_CLUSTER_PARTITIONS_COUNT=1
      - ZEEBE_BROKER_CLUSTER_REPLICATION_FACTOR=1
      - ZEEBE_BROKER_CLUSTER_CLUSTER_SIZE=1
      - ZEEBE_BROKER_DATA_DISK_USAGE_REPLICATIONWATERMARK=0.9
      - ZEEBE_BROKER_DATA_DISK_USAGE_COMMANDWATERMARK=0.85
      - SPRING_PROFILES_ACTIVE=postgres
      - ZEEBE_BROKER_DB_HOST=postgresdb
      - ZEEBE_BROKER_DB_PORT=5432
      - ZEEBE_BROKER_DB_NAME=zeebe
      - ZEEBE_BROKER_DB_USER=postgres
      - ZEEBE_BROKER_DB_PASSWORD=admin
    depends_on:
      postgresdb:
        condition: service_healthy
    ports:
      - "26500:26500" # Zeebe client communication
    networks:
      - example

  camunda-operate:
    image: camunda/operate:8.5.0
    container_name: operate
    environment:
      - CAMUNDA_OPERATE_ZEEBE_GATEWAYADDRESS=zeebe:26500
      - CAMUNDA_OPERATE_ELASTICSEARCH_URL=http://elasticsearch:9200
      - CAMUNDA_OPERATE_IDENTITY_ISSUERBACKENDURL=http://identity:8084
    depends_on:
      - camunda-zeebe
      - camunda-elasticsearch
    ports:
      - "8081:8080"
    networks:
      - example

  camunda-tasklist:
    image: camunda/tasklist:8.5.0
    container_name: tasklist
    environment:
      - CAMUNDA_TASKLIST_ZEEBE_GATEWAYADDRESS=zeebe:26500
      - CAMUNDA_TASKLIST_ELASTICSEARCH_URL=http://elasticsearch:9200
      - CAMUNDA_TASKLIST_IDENTITY_ISSUERBACKENDURL=http://identity:8084
    depends_on:
      - camunda-zeebe
      - camunda-elasticsearch
    ports:
      - "8083:8080"
    networks:
      - example

  camunda-identity:
    image: camunda/identity:8.5.0
    container_name: identity
    environment:
      - IDENTITY_DATABASE_HOST=postgresdb
      - IDENTITY_DATABASE_PORT=5432
      - IDENTITY_DATABASE_NAME=identity
      - IDENTITY_DATABASE_USERNAME=postgres
      - IDENTITY_DATABASE_PASSWORD=admin
      - KEYCLOAK_FRONTEND_URL=http://keycloak:8080
      - IDENTITY_KEYCLOAK_ISSUERURL=http://keycloak:8080/realms/camunda-platform
      - IDENTITY_KEYCLOAK_ADMIN_URL=http://keycloak:8080/admin/realms/camunda-platform
    depends_on:
      postgresdb:
        condition: service_healthy
    ports:
      - "8084:8084"
    networks:
      - example

  camunda-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    networks:
      - example

  ########## ONECX-SHELL

  onecx-shell-ui:
    image: ${ONECX_SHELL_UI}
    container_name: onecx-shell-ui
    environment:
      ONECX_PERMISSIONS_ENABLED: true
      ONECX_PERMISSIONS_CACHE_ENABLED: false
      ONECX_PERMISSIONS_PRODUCT_NAME: "onecx-shell"
      APP_BASE_HREF: "/onecx-shell/"
      KEYCLOAK_URL: http://keycloak-app
      ONECX_VAR_REMAP: "KEYCLOAK_REALM=KC_REALM;KEYCLOAK_CLIENT_ID=CLIENT_USER_ID"
      CLIENT_USER_ID: "onecx-shell-ui-client"
    depends_on:
      keycloak-app:
        condition: service_healthy
      onecx-shell-bff:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-shell-ui.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-shell-ui.rule=Host(`local-proxy`)&&PathPrefix(`/onecx-shell/`)"
    env_file:
      - common.env
    networks:
      - example

  onecx-shell-bff:
    image: ${ONECX_SHELL_BFF}
    container_name: onecx-shell-bff
    environment:
      ONECX_PERMISSIONS_PRODUCT_NAME: "onecx-shell"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      keycloak-app:
        condition: service_healthy
      onecx-theme-svc:
        condition: service_started
      onecx-permission-svc:
        condition: service_started
      onecx-product-store-svc:
        condition: service_started
      onecx-user-profile-svc:
        condition: service_started
      onecx-tenant-svc:
        condition: service_started
      onecx-workspace-svc:
        condition: service_started
    labels:
      - "traefik.http.services.onecx-shell-bff.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-shell-bff.rule=Host(`onecx-shell-bff`)"
    env_file:
      - common.env
      - bff.env
    networks:
      - example

  ########## ONECX THEME
  onecx-theme-svc:
    image: ${ONECX_THEME_SVC}
    environment:
      QUARKUS_DATASOURCE_USERNAME: onecx_theme
      QUARKUS_DATASOURCE_PASSWORD: onecx_theme
      QUARKUS_DATASOURCE_JDBC_URL: "jdbc:postgresql://postgresdb:5432/onecx_theme?sslmode=disable"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      postgresdb:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-theme-svc.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-theme-svc.rule=Host(`onecx-theme-svc`)"
    env_file:
      - common.env
      - svc.env
    networks:
      - example

  onecx-theme-bff:
    image: ${ONECX_THEME_BFF}
    environment:
      ONECX_PERMISSIONS_PRODUCT_NAME: "onecx-theme"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      onecx-theme-svc:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-theme-bff.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-theme-bff.rule=Host(`onecx-theme-bff`)"
    env_file:
      - common.env
      - bff.env
    networks:
      - example
    profiles:
      - all

  onecx-theme-ui:
    image: ${ONECX_THEME_UI}
    environment:
      APP_BASE_HREF: "/mfe/theme/"
      APP_ID: "onecx-theme-ui"
      PRODUCT_NAME: "onecx-theme"
    depends_on:
      onecx-theme-bff:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-theme-ui.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-theme-ui.rule=Host(`local-proxy`)&&PathPrefix(`/mfe/theme/`)"
    networks:
      - example
    profiles:
      - all

  ########## ONECX WORKSPACE
  onecx-workspace-svc:
    image: ${ONECX_WORKSPACE_SVC}
    container_name: onecx-workspace-svc
    user: root
    environment:
      QUARKUS_DATASOURCE_USERNAME: onecx_workspace
      QUARKUS_DATASOURCE_PASSWORD: onecx_workspace
      QUARKUS_DATASOURCE_JDBC_URL: "jdbc:postgresql://postgresdb:5432/onecx_workspace?sslmode=disable"
      TKIT_RS_CONTEXT_TENANT_ID_ENABLED: "false"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      postgresdb:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-workspace-svc.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-workspace-svc.rule=Host(`onecx-workspace-svc`)"
    env_file:
      - common.env
      - svc.env
    networks:
      - example

  onecx-workspace-bff:
    image: ${ONECX_WORKSPACE_BFF}
    environment:
      ONECX_PERMISSIONS_PRODUCT_NAME: "onecx-workspace"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      onecx-workspace-svc:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-workspace-bff.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-workspace-bff.rule=Host(`onecx-workspace-bff`)"
    env_file:
      - common.env
      - bff.env
    networks:
      - example

  onecx-workspace-ui:
    image: ${ONECX_WORKSPACE_UI}
    environment:
      APP_BASE_HREF: "/mfe/workspace/"
      APP_ID: "onecx-workspace-ui"
      PRODUCT_NAME: "onecx-workspace"
    depends_on:
      onecx-workspace-bff:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-workspace-ui.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-workspace-ui.rule=Host(`local-proxy`)&&PathPrefix(`/mfe/workspace/`)"
    networks:
      - example

  ########## ONECX-PERMISSION
  onecx-permission-svc:
    image: ${ONECX_PERMISSION_SVC}
    environment:
      QUARKUS_DATASOURCE_USERNAME: onecx_permission
      QUARKUS_DATASOURCE_PASSWORD: onecx_permission
      QUARKUS_DATASOURCE_JDBC_URL: "jdbc:postgresql://postgresdb:5432/onecx_permission?sslmode=disable"
      QUARKUS_REST_CLIENT_ONECX_TENANT_URL: "http://onecx-tenant-svc:8080"
      ONECX_PERMISSION_TOKEN_VERIFIED: false
      TKIT_RS_CONTEXT_TENANT_ID_ENABLED: "false"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      postgresdb:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-permission-svc.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-permission-svc.rule=Host(`onecx-permission-svc`)"
    env_file:
      - common.env
      - svc.env
    networks:
      - example

  onecx-permission-bff:
    image: ${ONECX_PERMISSION_BFF}
    environment:
      ONECX_PERMISSIONS_PRODUCT_NAME: "onecx-permission"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      onecx-permission-svc:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-permission-bff.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-permission-bff.rule=Host(`onecx-permission-bff`)"
    env_file:
      - common.env
      - bff.env
    networks:
      - example
    profiles:
      - all

  onecx-permission-ui:
    image: ${ONECX_PERMISSION_UI}
    environment:
      APP_BASE_HREF: "/mfe/permission/"
      APP_ID: "onecx-permission-ui"
      PRODUCT_NAME: "onecx-permission"
    depends_on:
      onecx-permission-bff:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-permission-ui.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-permission-ui.rule=Host(`local-proxy`)&&PathPrefix(`/mfe/permission/`)"
    networks:
      - example
    profiles:
      - all

  ########## ONECX-PRODUCT-STORE
  onecx-product-store-svc:
    image: ${ONECX_PRODUCT_STORE_SVC}
    environment:
      QUARKUS_DATASOURCE_USERNAME: onecx_product_store
      QUARKUS_DATASOURCE_PASSWORD: onecx_product_store
      QUARKUS_DATASOURCE_JDBC_URL: "jdbc:postgresql://postgresdb:5432/onecx_product_store?sslmode=disable"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      postgresdb:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-product-store-svc.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-product-store-svc.rule=Host(`onecx-product-store-svc`)"
    env_file:
      - common.env
      - svc.env
    networks:
      - example

  onecx-product-store-bff:
    image: ${ONECX_PRODUCT_STORE_BFF}
    environment:
      ONECX_PERMISSIONS_PRODUCT_NAME: "onecx-product-store"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      onecx-product-store-svc:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-product-store-bff.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-product-store-bff.rule=Host(`onecx-product-store-bff`)"
    env_file:
      - common.env
      - bff.env
    networks:
      - example
    profiles:
      - all

  onecx-product-store-ui:
    image: ${ONECX_PRODUCT_STORE_UI}
    environment:
      APP_BASE_HREF: "/mfe/product-store/"
      APP_ID: "onecx-product-store-ui"
      PRODUCT_NAME: "onecx-product-store"
    depends_on:
      onecx-product-store-bff:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-product-store-ui.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-product-store-ui.rule=Host(`local-proxy`)&&PathPrefix(`/mfe/product-store/`)"
    networks:
      - example
    profiles:
      - all

  ########## ONECX-USER-PROFILE
  onecx-user-profile-svc:
    image: ${ONECX_USER_PROFILE_SVC}
    environment:
      QUARKUS_DATASOURCE_USERNAME: onecx_user_profile
      QUARKUS_DATASOURCE_PASSWORD: onecx_user_profile
      QUARKUS_DATASOURCE_JDBC_URL: "jdbc:postgresql://postgresdb:5432/onecx_user_profile?sslmode=disable"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      postgresdb:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-user-profile-svc.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-user-profile-svc.rule=Host(`onecx-user-profile-store-svc`)"
    env_file:
      - common.env
      - svc.env
    networks:
      - example

  onecx-user-profile-bff:
    image: ${ONECX_USER_PROFILE_BFF}
    environment:
      ONECX_PERMISSIONS_PRODUCT_NAME: "onecx-user-profile"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      onecx-user-profile-svc:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-user-profile-bff.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-user-profile-bff.rule=Host(`onecx-user-profile-bff`)"
    env_file:
      - common.env
      - bff.env
    networks:
      - example
    profiles:
      - all

  onecx-user-profile-ui:
    image: ${ONECX_USER_PROFILE_UI}
    environment:
      APP_BASE_HREF: "/mfe/user-profile/"
      APP_ID: "onecx-user-profile-ui"
      PRODUCT_NAME: "onecx-user-profile"
    depends_on:
      onecx-user-profile-bff:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-user-profile-ui.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-user-profile-ui.rule=Host(`local-proxy`)&&PathPrefix(`/mfe/user-profile/`)"
    networks:
      - example
    profiles:
      - all

  ########## ONECX-IAM
  onecx-iam-kc-svc:
    image: ${ONECX_IAM_KC_SVC}
    environment:
      QUARKUS_KEYCLOAK_ADMIN_CLIENT_SERVER_URL: http://keycloak-app:8080
      QUARKUS_KEYCLOAK_ADMIN_CLIENT_REALM: master
      QUARKUS_KEYCLOAK_ADMIN_CLIENT_USERNAME: admin
      QUARKUS_KEYCLOAK_ADMIN_CLIENT_PASSWORD: admin
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      postgresdb:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-iam-kc-svc.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-iam-kc-svc.rule=Host(`onecx-iam-kc-svc`)"
    env_file:
      - common.env
      - svc.env
    networks:
      - example
    profiles:
      - all

  onecx-iam-bff:
    image: ${ONECX_IAM_BFF}
    environment:
      ONECX_PERMISSIONS_PRODUCT_NAME: "onecx-iam"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      onecx-iam-kc-svc:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-iam-bff.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-iam-bff.rule=Host(`onecx-iam-bff`)"
    env_file:
      - common.env
      - bff.env
    networks:
      - example
    profiles:
      - all

  onecx-iam-ui:
    image: ${ONECX_IAM_UI}
    environment:
      APP_BASE_HREF: "/mfe/iam/"
      APP_ID: "onecx-iam-ui"
      PRODUCT_NAME: "onecx-iam"
    depends_on:
      onecx-iam-bff:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-iam-ui.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-iam-ui.rule=Host(`local-proxy`)&&PathPrefix(`/mfe/iam/`)"
    networks:
      - example
    profiles:
      - all

  ########## ONECX-TENANT
  onecx-tenant-svc:
    image: ${ONECX_TENANT_SVC}
    environment:
      QUARKUS_DATASOURCE_USERNAME: onecx_tenant
      QUARKUS_DATASOURCE_PASSWORD: onecx_tenant
      QUARKUS_DATASOURCE_JDBC_URL: "jdbc:postgresql://postgresdb:5432/onecx_tenant?sslmode=disable"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      postgresdb:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-tenant-svc.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-tenant-svc.rule=Host(`onecx-tenant-svc`)"
    env_file:
      - common.env
      - svc.env
    networks:
      - example

  onecx-tenant-bff:
    image: ${ONECX_TENANT_BFF}
    environment:
      ONECX_PERMISSIONS_PRODUCT_NAME: "onecx-tenant"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      onecx-tenant-svc:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-tenant-bff.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-tenant-bff.rule=Host(`onecx-tenant-bff`)"
      #- "traefik.http.routers.local_mfe.entrypoints=web"
      #- "traefik.http.routers.local_mfe.rule=Host(`local-proxy`)&&PathPrefix(`/mfe/tenant/`)"
      #- "traefik.http.routers.local_mfe.service=local_mfe@file"
    env_file:
      - common.env
      - bff.env
    networks:
      - example
    profiles:
      - all

  onecx-tenant-ui:
    image: ${ONECX_TENANT_UI}
    environment:
      APP_BASE_HREF: "/mfe/tenant/"
      APP_ID: "onecx-tenant-ui"
      PRODUCT_NAME: "onecx-tenant"
    depends_on:
      onecx-tenant-bff:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-tenant-ui.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-tenant-ui.rule=Host(`local-proxy`)&&PathPrefix(`/mfe/tenant/`)"
    networks:
      - example
    profiles:
      - all

  ########## ONECX-WELCOME
  onecx-welcome-svc:
    image: ${ONECX_WELCOME_SVC}
    environment:
      QUARKUS_DATASOURCE_USERNAME: onecx_welcome
      QUARKUS_DATASOURCE_PASSWORD: onecx_welcome
      QUARKUS_DATASOURCE_JDBC_URL: "jdbc:postgresql://postgresdb:5432/onecx_welcome?sslmode=disable"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      postgresdb:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-welcome-svc.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-welcome-svc.rule=Host(`onecx-welcome-svc`)"
    env_file:
      - common.env
      - svc.env
    networks:
      - example

  onecx-welcome-bff:
    image: ${ONECX_WELCOME_BFF}
    environment:
      ONECX_PERMISSIONS_PRODUCT_NAME: "onecx-welcome"
    healthcheck:
      test: curl --head -fsS http://localhost:8080/q/health
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      onecx-welcome-svc:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-welcome-bff.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-welcome-bff.rule=Host(`onecx-welcome-bff`)"
      # - "traefik.http.routers.local_mfe.entrypoints=web"
      # - "traefik.http.routers.local_mfe.rule=Host(`local-proxy`)&&PathPrefix(`/mfe/welcome/`)"
      # - "traefik.http.routers.local_mfe.service=local_mfe@file"
    env_file:
      - common.env
      - bff.env
    networks:
      - example
    profiles:
      - all

  onecx-welcome-ui:
    image: ${ONECX_WELCOME_UI}
    environment:
      APP_BASE_HREF: "/mfe/welcome/"
      APP_ID: "onecx-welcome-ui"
      PRODUCT_NAME: "onecx-welcome"
    depends_on:
      onecx-welcome-bff:
        condition: service_healthy
    labels:
      - "traefik.http.services.onecx-welcome-ui.loadbalancer.server.port=8080"
      - "traefik.http.routers.onecx-welcome-ui.rule=Host(`local-proxy`)&&PathPrefix(`/mfe/welcome/`)"
    networks:
      - example
    profiles:
      - all

volumes:
  postgres:
   name: onecx-local-env_postgres
networks:
  example:
